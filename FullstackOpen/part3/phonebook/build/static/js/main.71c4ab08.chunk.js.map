{"version":3,"sources":["services/persons.js","components/Persons.js","components/Filter.js","components/Notification.js","components/PersonForm.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Persons","persons","search","deleteEntry","filter","p","name","toLowerCase","includes","map","number","onClick","Filter","props","value","onChange","onSearch","Notification","message","divclass","className","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNewNumber","type","App","useState","setPersons","setNewNumber","setNewName","newSearch","setNewSearch","newNotif","setNewNotif","notifClass","setNotifClass","useEffect","personsService","initialPeople","event","target","preventDefault","nameObject","existingEntry","find","window","confirm","returnedPerson","catch","error","returnedPeople","concat","person","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71c4ab08.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (newObject, id) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    remove: remove,\n    update: update\n}\n","import React from 'react'\nimport persons from '../services/persons'\n\n\nconst Persons = ({persons, search, deleteEntry}) => {\n  return (\n    <div>\n      {persons\n        .filter(p => p.name.toLowerCase().includes(search.toLowerCase()))\n        .map(p =>\n          <div key={p.id}>\n            {p.name} {p.number} <button onClick={() => deleteEntry(p.id)}>delete</button>\n          </div>)}\n    </div>\n  )\n}\n\nexport default Persons\n","import React from 'react'\n\nconst Filter = (props) => {\n  return (\n      <div>\n        filter shown with <input value={props.search} onChange={props.onSearch} />\n      </div>\n  )\n}\n\nexport default Filter\n","import React from 'react'\r\n\r\nconst Notification = ({message, divclass}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className={divclass}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from \"react\"\n\n\nconst PersonForm = (props) => {\n  return (\n      <form onSubmit={props.addName}>\n        <div>\n          name: <input value={props.newName} onChange={props.handleNameChange} />\n        </div>\n        <div>\n          number: <input value={props.newNumber} onChange={props.handleNewNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n\n  )\n}\n\nexport default PersonForm\n","import React, { useState, useEffect } from \"react\";\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport PersonForm from \"./components/PersonForm\";\nimport personsService from \"./services/persons\"\nimport './index.css'\n\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newName, setNewName] = useState(\"\");\n  const [newSearch, setNewSearch] = useState(\"\")\n  const [newNotif, setNewNotif] = useState(null)\n  const [notifClass, setNotifClass] = useState(\"added\")\n\n  const hook = () => {\n    personsService\n      .getAll()\n      .then(initialPeople => {\n        setPersons(initialPeople)\n      })\n  }\n\n  useEffect(hook, [])\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    // check if name is already in the phonebook\n    const existingEntry = persons.find(p => p.name === newName)\n    if (existingEntry) {\n      const result = window.confirm(`${newName} is already added to phonebook. Replace the number?`)\n      if (result) {\n        personsService\n          .update(nameObject, existingEntry.id)\n          // returned data from update is just the one person, so we map over the persons list and if the person id matches our current one, we replace it with the new\n          // returnedPerson object otherwise we just keep the current element (which is unchanged)\n          .then(returnedPerson => {\n            setPersons(persons.map(p => p.id === returnedPerson.id ? returnedPerson : p))\n            setNewName('')\n            setNewNumber('')\n            setNewNotif(`Updated ${returnedPerson.name}`)\n          })\n          .catch(error => {\n            setNewNotif(`Information of ${nameObject.name} has already been removed from server`)\n            setNotifClass(\"error\")\n          })\n      }\n    } else {\n      personsService\n        .create(nameObject)\n        .then(returnedPeople => {\n          setPersons(persons.concat(returnedPeople))\n          setNewName('')\n          setNewNumber('')\n          setNewNotif(`Added ${nameObject.name} to the phonebook`)\n        })\n        .catch(error => {\n          setNewNotif(`Information of ${nameObject.name} has already been removed from server`)\n          setNotifClass(\"error\")\n        })\n\n    }\n  }\n\n  const deleteName = (id) => {\n    const person = persons.find(p => p.id === id)\n    const ok = window.confirm(`Delete ${person.name}?`)\n    if (ok) {\n      personsService\n        .remove(person.id)\n        .then(returnedPeople => {\n          setPersons(persons.filter(p => p.id !== id))\n        })\n        .catch(error => {\n          setNewNotif(`Information of ${person.name} has already been removed from server`)\n          setNotifClass(\"error\")\n        })\n    }\n\n  }\n\n  const handleNameChange = (event) => {\n    // console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setNewSearch(event.target.value)\n  }\n\n  // const personToShow = newSearch === \"\" ? persons : persons.filter(p => p.name.toLowerCase().includes(newSearch.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={newNotif} divclass={notifClass} />\n      <Filter search={newSearch} onSearch={handleSearchChange} />\n      <h3>add a new</h3>\n      <PersonForm addName={addName} newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNewNumber={handleNewNumber} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} search={newSearch} deleteEntry={deleteName} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}